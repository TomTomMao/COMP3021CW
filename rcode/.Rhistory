geom_bar()
# bar chart
airbnb %>%
ggplot(aes(x = realSum, y = location)) +
geom_col()
# bar chart
airbnb %>%
group_by(location) +
summarise(avg_price = mean(realSum))+
ggplot(aes(x = avg_price, y = location)) +
geom_col()
# bar chart
airbnb %>%
group_by(location) +
summarise(avg_price = mean(realSum))
# bar chart
airbnb %>%
group_by(location) %>%
summarise(avg_price = mean(realSum)) %>%
ggplot(aes(x = avg_price, y = location)) +
geom_col()
# pie chart
airbnb_priceRanged_high
# pie chart
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=isHighOutlier)) +
geom_bar(stat="identity", width=1)
# pie chart
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=location)) +
geom_bar(stat="identity", width=1)
# pie chart
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=location)) +
geom_bar(stat="identity", width=1) +
facet_wrap(isHighOutlier~.)
# pie chart
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=location)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# pie chart
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=location)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
facet_wrap(isHighOutlier~.)
# bar chart plotable format.
airbnb_london_expensive_percentage_summarized <- airbnb_london_expensive_percentage %>% select(person_capacity, isHighOutlier, percentage) %>%
group_by(person_capacity, isHighOutlier) %>%
summarise(percentage=mean(percentage))
# Q6 In London, is that true that those “outlier” rooms can sell at a good price due to the higher number of people capacity?
# filter the data
airbnb_london_expensive <- airbnb_priceRanged %>%
filter(location=="london"&priceRange=="high") %>%
mutate(isHighOutlier = if_else(dist.outlier=="high"&metro_dist.outlier=="high", "outlier", "normal"))
# describe the data
airbnb_london_expensive %>% group_by(isHighOutlier) %>%
summarise(count=n(),meanPrice = mean(realSum))
# calculate the percentage in the group
airbnb_london_expensive_percentage <- airbnb_london_expensive %>% group_by(isHighOutlier, person_capacity) %>%
mutate(this_person_capacity_total_count = n()) %>% ungroup() %>%
group_by(isHighOutlier) %>%
mutate(this_isHighOutlier_total_count = n()) %>%
mutate(percentage = this_person_capacity_total_count/this_isHighOutlier_total_count)
# bar chart plotable format.
airbnb_london_expensive_percentage_summarized <- airbnb_london_expensive_percentage %>% select(person_capacity, isHighOutlier, percentage) %>%
group_by(person_capacity, isHighOutlier) %>%
summarise(percentage=mean(percentage))
# bar chart
airbnb_london_expensive_percentage_summarized %>%
ggplot(aes(x=person_capacity,y=percentage,fill=isHighOutlier)) +
geom_col(position="dodge")
# pie chart
airbnb_london_expensive_percentage_summarized
# pie chart
airbnb_london_expensive_percentage_summarized  %>%
ggplot(aes(x="",y=percentage,fill=person_capacity)) +
geom_bar(stat="identity",width=1)
# pie chart
airbnb_london_expensive_percentage_summarized  %>%
ggplot(aes(x="",y=percentage,fill=person_capacity)) +
geom_bar(stat="identity",width=1) +
facet_wrap(isHighOutlier)
# pie chart
airbnb_london_expensive_percentage_summarized  %>%
ggplot(aes(x="",y=percentage,fill=person_capacity)) +
geom_bar(stat="identity",width=1) +
facet_wrap(isHighOutlier~.)
# pie chart
airbnb_london_expensive_percentage_summarized  %>%
ggplot(aes(x="",y=percentage,fill=person_capacity)) +
geom_bar(stat="identity",width=1) +
coord_polar("y", start=0) +
facet_wrap(isHighOutlier~.)
q1_hist_low # not effective, too less group
q1_hist_high <- airbnb %>%
filter(realSum >= 2500) %>%
ggplot(aes(x = realSum)) +
geom_histogram()
# multiple histogram (good)
airbnb %>%
mutate(priceGroup = if_else(
realSum < 2500, "low", "high"
)) %>%
ggplot(aes(x = realSum)) +
geom_histogram() +
facet_wrap(priceGroup~., scales = "free")
# Q1: How is price distributed?
# single Histogram (not expressive)
q1_hist_low <- airbnb %>%
ggplot(aes(x = realSum)) +
geom_histogram()
q1_hist # not effective, too less group
# Q1: How is price distributed?
# single Histogram (not expressive)
q1_hist <- airbnb %>%
ggplot(aes(x = realSum)) +
geom_histogram()
q1_hist # not effective, too less group
# scatter plot (overplotting)
q1_scatter <- airbnb %>%
ggplot(aes(x=realSum, y=realSum)) +
geom_point()
q1_scatter
# bar chart
airbnb %>%
group_by(location) %>%
summarise(avg_price = mean(realSum)) %>%
ggplot(aes(x = avg_price, y = location)) +
geom_col()
# scatter plot(over plotting)
airbnb %>%
ggplot(aes(x = realSum, y = location)) +
geom_point(position="jitter") # can't see the statistical information or overplotting
# jittered scatter plot(over plotting)
airbnb %>%
ggplot(aes(x = realSum, y = location)) +
geom_point(position="jitter") # can't see the statistical information or overplotting
# linear boxplot(not expressive)
airbnb %>%
ggplot(aes(y = location, x = realSum)) +
geom_boxplot() # expensive dot makes the realSum scale too large to see the box
# linear boxplot(not expressive)
airbnb %>%
ggplot(aes(y = location, x = realSum)) +
geom_boxplot() # expensive dot makes the realSum scale too large to see the box
# boxplot with log realSum axis
airbnb_counted_by_location <- airbnb %>%
group_by(location) %>%
mutate(count = sum(realSum)/mean(realSum))
airbnb_counted_by_location %>%
ggplot(aes(y = location, x = realSum, fill=count)) +
geom_boxplot() + scale_x_log10(breaks = 10^(2:4)) +
scale_fill_gradient(low="lightblue", high="darkblue")
# boxplot with log realSum axis
airbnb_counted_by_location <- airbnb %>%
group_by(location) %>%
mutate(count = m()) # for the count of each group
# boxplot with log realSum axis
airbnb_counted_by_location <- airbnb %>%
group_by(location) %>%
mutate(count = n()) # for the count of each group
airbnb_counted_by_location %>%
ggplot(aes(y = location, x = realSum, fill=count)) +
geom_boxplot() + scale_x_log10(breaks = 10^(2:4)) +
scale_fill_gradient(low="lightblue", high="darkblue")
# Q3: What would affect the room price?
# convert room_type, room_shared, room_private, host_is_superhost to number
#airbnb_num : dataframe with number column added
# [data transforming]convert to numeric using mutate
airbnb_num <- airbnb %>% select(-c(attr_index, attr_index_norm, rest_index, rest_index_norm))
airbnb_num <- airbnb_num %>%
mutate(room_type_n = if_else(
room_type == "Private room", 1, if_else(room_type=="Entire home/apt", 2, 3)
))
airbnb_num <- airbnb_num %>%
mutate(room_shared_n = if_else(
room_shared == "True", 1, 2)
)
airbnb_num <- airbnb_num %>%
mutate(room_private_n = if_else(
room_private == "True", 1, 2)
)
airbnb_num <- airbnb_num %>%
mutate(host_is_superhost_n = if_else(
room_private == "True", 1, 2)
)
airbnb$room_type_n
airbnb$room_type
unique(airbnb$room_type)
# Q3: What would affect the room price?
# convert room_type, room_shared, room_private, host_is_superhost to number
# airbnb_num : dataframe with number column added
# convert to numeric using mutate
airbnb_num <- airbnb %>% select(-c(attr_index, attr_index_norm, rest_index, rest_index_norm))
airbnb_num <- airbnb_num %>%
mutate(room_type_n = if_else(
room_type == "Private room", 1, if_else(room_type=="Entire home/apt", 2, 3)
)) # room_type -> room_type_n = {"Private room" -> 1; "Entire home/apt -> 2; "share room" -> 3}
airbnb_num <- airbnb_num %>%
mutate(room_shared_n = if_else(
room_shared == "True", 1, 2)
)# room_shared -> room_shared_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(room_private_n = if_else(
room_private == "True", 1, 2)
) # room_private -> room_private_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(host_is_superhost_n = if_else(
host_is_superhost_n == "True", 1, 2)
) # host_is_superhost_n -> host_is_superhost_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(person_capacity_n = strtoi(person_capacity))
# airbnb_num_num: every column are num or int
airbnb_num_num <- airbnb_num %>% select(-c(X.1, X, person_capacity, room_type, room_shared, room_private, host_is_superhost, location, time))
# sampled
airbnb_num_num_sample <- airbnb_num_num %>% sample_n(1000)
# [correlation scatter plot matrix] (not effective as the bar chart, low data-ink ratio)
airbnb_num_num_cor_matrix_scatter <-  airbnb_num_num_sample %>%
filter(realSum<2500) %>%
select(realSum, cleanliness_rating, guest_satisfaction_overall, bedrooms, dist, metro_dist,room_type_n, room_shared_n, room_private_n,host_is_superhost_n) %>%
pairs()
airbnb_num_num_cor_matrix_scatter
airbnb_num <- airbnb_num %>%
mutate(host_is_superhost_n = if_else(
host_is_superhost == "True", 1, 2)
) # room_shared -> room_shared_n = {"True" -> 1; "False" -> 2}
# Q3: What would affect the room price?
# convert room_type, room_shared, room_private, host_is_superhost to number
# airbnb_num : dataframe with number column added
# convert to numeric using mutate
airbnb_num <- airbnb %>% select(-c(attr_index, attr_index_norm, rest_index, rest_index_norm))
airbnb_num <- airbnb_num %>%
mutate(room_type_n = if_else(
room_type == "Private room", 1, if_else(room_type=="Entire home/apt", 2, 3)
)) # room_type -> room_type_n = {"Private room" -> 1; "Entire home/apt -> 2; "share room" -> 3}
airbnb_num <- airbnb_num %>%
mutate(room_shared_n = if_else(
room_shared == "True", 1, 2)
)# room_shared -> room_shared_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(room_private_n = if_else(
room_private == "True", 1, 2)
) # room_private -> room_private_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(host_is_superhost_n = if_else(
host_is_superhost == "True", 1, 2)
) # room_shared -> room_shared_n = {"True" -> 1; "False" -> 2}
airbnb_num <- airbnb_num %>%
mutate(person_capacity_n = strtoi(person_capacity))
# airbnb_num_num: every column are num or int
airbnb_num_num <- airbnb_num %>% select(-c(X.1, X, person_capacity, room_type, room_shared, room_private, host_is_superhost, location, time))
# sampled
airbnb_num_num_sample <- airbnb_num_num %>% sample_n(1000)
# [correlation scatter plot matrix] (not effective as the bar chart, low data-ink ratio)
airbnb_num_num_cor_matrix_scatter <-  airbnb_num_num_sample %>%
filter(realSum<2500) %>%
select(realSum, cleanliness_rating, guest_satisfaction_overall, bedrooms, dist, metro_dist,room_type_n, room_shared_n, room_private_n,host_is_superhost_n) %>%
pairs()
airbnb_num_num_cor_matrix_scatter
# correlation matrix (correlation coefficient -> colour hue and saturation,
#(correlation coefficient -> size; variable name-> x and y)
airbnb_cor <- airbnb_num_num %>% select(-c(priceGroup)) %>% cor() %>% round(2)
airbnb_cor_ <- airbnb_cor %>% corrplot() # plot
# long data for the  bar chart
airbnb_cor_realSum <- data.frame(airbnb_cor) %>% select(realSum) %>% t() %>% data.frame() %>%
gather(variable, correlation) %>% filter(variable != "realSum")
# correlation matrix (correlation coefficient -> colour hue and saturation,
#(correlation coefficient -> size; variable name-> x and y)
airbnb_cor <- airbnb_num_num %>% select(-c(priceGroup)) %>% cor() %>% round(2)
airbnb_cor_ <- airbnb_cor %>% corrplot() # plot
# long data for the  bar chart
airbnb_cor_realSum <- data.frame(airbnb_cor) %>% select(realSum) %>% t() %>% data.frame() %>%
gather(variable, correlation) %>% filter(variable != "realSum")
# correlation bar chart
air_cor_bar <- airbnb_cor_realSum %>%
ggplot(aes(y=reorder(variable, desc(correlation)), x=correlation)) +
geom_col()
air_cor_bar
# correlation scatter plot matrix
airbnb_num_num_cor_matrix_scatter <-  airbnb_num_num_sample %>%
select(realSum, cleanliness_rating, guest_satisfaction_overall, bedrooms, dist, metro_dist,room_type_n, room_shared_n, room_private_n,host_is_superhost_n) %>%
pairs()
# correlation scatter plot matrix
airbnb_num_num_cor_matrix_scatter <-  airbnb_num_num_sample %>%
select(realSum, cleanliness_rating, guest_satisfaction_overall, bedrooms, dist, metro_dist,room_type_n, room_shared_n, room_private_n,host_is_superhost_n) %>%
pairs()
airbnb_num_num_cor_matrix_scatter
airbnb_num_num_cor_matrix_scatter
# correlation matrix (correlation coefficient -> colour)
#(correlation coefficient -> size; variable name-> x and y)
airbnb_cor <- airbnb_num_num %>% select(-c(priceGroup)) %>% cor() %>% round(2)
airbnb_cor_ <- airbnb_cor %>% corrplot() # plot
# long data for the  bar chart
airbnb_cor_realSum <- data.frame(airbnb_cor) %>% select(realSum) %>% t() %>% data.frame() %>%
gather(variable, correlation) %>% filter(variable != "realSum")
# correlation bar chart
air_cor_bar <- airbnb_cor_realSum %>%
ggplot(aes(y=reorder(variable, desc(correlation)), x=correlation)) +
geom_col()
air_cor_bar
# Q4: How do the expensive rooms differ from the cheap rooms in terms of the distance to the metro station and city center?
# using scatter plot (can't see any difference) (x: dist, y: metro_dist, colour: priceRange), facet: priceRange
airbnb_realSum_min <- airbnb$realSum %>% min()
airbnb_realSum_25 <- airbnb$realSum %>% quantile(0.25)
airbnb_realSum_50 <- airbnb$realSum %>% quantile(0.5)
airbnb_realSum_75 <- airbnb$realSum %>% quantile(0.75)
airbnb_realSum_max <- airbnb$realSum %>% max()
airbnb_priceRanged <- airbnb %>% mutate(
priceRange = if_else(realSum < airbnb_realSum_25, "low",
if_else(realSum < airbnb_realSum_50, "mid_low",
if_else(realSum < airbnb_realSum_75, "mid_high",
"high"
)
)
)
)
airbnb_priceRanged$priceRange <- factor(airbnb_priceRanged$priceRange, order=TRUE,
levels = c("low","mid_low","mid_high", "high")) # make this ordinal
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(count=n()) #  check the percentage of each group
airbnb_priceRanged %>%
sample_n(1000) %>%
ggplot(aes(x=dist,y=metro_dist,colour=priceRange)) +
geom_point() +
facet_wrap(priceRange~.)
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(count=n()) #  check the percentage of each group
# boxplot (not jittered) is not expressive
airbnb_priceRanged %>%
ggplot(aes(x=priceRange, y=dist)) +
geom_boxplot() # result: no significent difference
# boxplot (not jittered) is not expressive
airbnb_priceRanged %>%
ggplot(aes(x=priceRange, y=metro_dist)) +
geom_boxplot() # no significent differenct
# improvement: make the position of the outliers of each group become jitter, so that the distribution of the outliers can be seen. (dist)
# reference: https://stackoverflow.com/questions/44141193/apply-jittering-to-outliers-data-in-a-boxplot-with-ggplot2
# calculate the outlier limits
airbnb_priceRanged <- airbnb_priceRanged %>%
group_by(priceRange) %>%
mutate(dist.outlier = if_else(dist > quantile(dist, .75) + 1.5*IQR(dist), "high",
if_else(dist < quantile(dist, .25) - 1.50*IQR(dist), "low", "normal"))
) # outliers are defined as high and low, the normal is not the outliers
# 2. box with outliers whose position x is jittered
airbnb_priceRanged %>%
ggplot(aes(x=priceRange,y=dist)) +
geom_boxplot(outlier.shape = NA) + # not showing the default outliers
geom_point(aes(x=priceRange, y=dist, colour=dist.outlier, shape=dist.outlier), position="jitter") + # show the outliers
scale_colour_manual(values = c("black", NA, NA)) + # only show the "high" group
scale_shape_manual(values=c(20,NA,20)) +
guides(colour="none") +
guides(shape="none")
# bar chart: number of outliers(dist)
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(
dist.outlierPercentage = length(realSum[dist.outlier=="high"])/length(realSum[TRUE])
) %>% ggplot(aes(x=priceRange, y=dist.outlierPercentage)) + geom_col()
# 2. box with outliers whose position x is jittered
airbnb_priceRanged %>%
ggplot(aes(x=priceRange,y=dist)) +
geom_boxplot(outlier.shape = NA) + # not showing the default outliers
geom_point(aes(x=priceRange, y=dist, colour=dist.outlier, shape=dist.outlier), position="jitter") + # show the outliers
scale_colour_manual(values = c("black", NA, NA)) + # only show the "high" group, because we don't care the low one
scale_shape_manual(values=c(20,NA,20)) + # same
guides(colour="none") +
guides(shape="none")
# 2. box with outliers whose position x is jittered
airbnb_priceRanged %>%
ggplot(aes(x=priceRange,y=dist)) +
geom_boxplot(outlier.shape = NA) + # not showing the default outliers
geom_point(aes(x=priceRange, y=dist, colour=dist.outlier, shape=dist.outlier), position="jitter") + # show the outliers
scale_colour_manual(values = c("black", NA, NA)) + # only show the "high" group, because we don't care the low one
scale_shape_manual(values=c(20,NA,20)) + # same
guides(colour="none") + # hide the legends
guides(shape="none") # hide the legends
# bar chart: number of outliers(dist)
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(
dist.outlierPercentage = length(realSum[dist.outlier=="high"])/length(realSum[TRUE])
) %>% ggplot(aes(x=priceRange, y=dist.outlierPercentage)) + geom_col()
# multiple histogram (good)
airbnb %>%
mutate(priceGroup = if_else(
realSum < 2500, "low", "high"
)) %>%
ggplot(aes(x = realSum)) +
geom_histogram() +
facet_wrap(priceGroup~., scales = "free")
library(dplyr)
library(ggplot2)
library(corrplot)
library(tidyr) # for gather() function
# load data
airbnb <- getwd() %>%
paste("/data/airbnb.csv", sep="") %>%
read.csv() %>%
mutate(priceGroup = if_else(
realSum < 2500, "low", "high"
)) # add a new column for different price group
# Q1: How is price distributed?
# single Histogram (not expressive, expensive rooms are not visible)
q1_hist <- airbnb %>%
ggplot(aes(x = realSum)) +
geom_histogram()
q1_hist
# multiple histogram (good)
airbnb %>%
mutate(priceGroup = if_else(
realSum < 2500, "low", "high"
)) %>%
ggplot(aes(x = realSum)) +
geom_histogram() +
facet_wrap(priceGroup~., scales = "free")
# scatter plot (overplotting)
q1_scatter <- airbnb %>%
ggplot(aes(x=realSum, y=realSum)) +
geom_point()
# converting to relative [0,0.25) -> "low"; [.25,.5) -> "mid_low; [.5,.75) -> "mid_high; [.75,1] -> "high"
airbnb_realSum_min <- airbnb$realSum %>% min()
airbnb_realSum_25 <- airbnb$realSum %>% quantile(0.25)
airbnb_realSum_50 <- airbnb$realSum %>% quantile(0.5)
airbnb_realSum_75 <- airbnb$realSum %>% quantile(0.75)
airbnb_realSum_max <- airbnb$realSum %>% max()
airbnb_priceRanged <- airbnb %>% mutate(
priceRange = if_else(realSum < airbnb_realSum_25, "low",
if_else(realSum < airbnb_realSum_50, "mid_low",
if_else(realSum < airbnb_realSum_75, "mid_high",
"high"
)
)
)
)
airbnb_priceRanged$priceRange <- factor(airbnb_priceRanged$priceRange, order=TRUE,
levels = c("low","mid_low","mid_high", "high")) # make this ordinal
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(count=n()) #  check the number of each group
# using scatter plot (x: dist, y: metro_dist, colour: priceRange), facet: priceRange
airbnb_priceRanged %>%
sample_n(1000) %>%
ggplot(aes(x=dist,y=metro_dist,colour=priceRange)) +
geom_point() +
facet_wrap(priceRange~.)
# boxplot (not jittered)
airbnb_priceRanged %>%
ggplot(aes(x=priceRange, y=dist)) +
geom_boxplot() # result: no significent difference
# boxplot (not jittered)
airbnb_priceRanged %>%
ggplot(aes(x=priceRange, y=metro_dist)) +
geom_boxplot() # no significent differenct
# improvement: make the position of the outliers of each group become jitter, so that the distribution of the outliers can be seen. (dist)
# reference: https://stackoverflow.com/questions/44141193/apply-jittering-to-outliers-data-in-a-boxplot-with-ggplot2
# calculate the outlier limits
airbnb_priceRanged <- airbnb_priceRanged %>%
group_by(priceRange) %>%
mutate(dist.outlier = if_else(dist > quantile(dist, .75) + 1.5*IQR(dist), "high",
if_else(dist < quantile(dist, .25) - 1.50*IQR(dist), "low", "normal"))
) # outliers are defined as high and low, the normal is not the outliers
# 2. box with outliers whose position x is jittered
airbnb_priceRanged %>%
ggplot(aes(x=priceRange,y=dist)) +
geom_boxplot(outlier.shape = NA) + # not showing the default outliers
geom_point(aes(x=priceRange, y=dist, colour=dist.outlier, shape=dist.outlier), position="jitter") + # show the outliers
scale_colour_manual(values = c("black", NA, NA)) + # only show the "high" group, because we don't care the low one
scale_shape_manual(values=c(20,NA,20)) + # same
guides(colour="none") + # hide the legends
guides(shape="none") # hide the legends
# bar chart: number of outliers(dist)
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(
dist.outlierPercentage = length(realSum[dist.outlier=="high"])/length(realSum[TRUE]) # calculate the percentages
) %>% ggplot(aes(x=priceRange, y=dist.outlierPercentage)) + geom_col()
# --------------metro_dist-------------- (code are similar with the code for dist)
# improvement: make the position of the outliers of each group become jitter, so that the distribution of the outliers can be seen. (metro_dist)
# reference: https://stackoverflow.com/questions/44141193/apply-jittering-to-outliers-data-in-a-boxplot-with-ggplot2
# [data transform] first: calculate the outlier limits
airbnb_priceRanged <- airbnb_priceRanged %>%
group_by(priceRange) %>%
mutate(metro_dist.outlier = if_else(metro_dist > quantile(metro_dist, .75) + 1.5*IQR(metro_dist), "high",
if_else(metro_dist < quantile(metro_dist, .25) - 1.50*IQR(metro_dist), "low", "normal"))
)
# second: box plot (metro_dist) with jittered outliers
airbnb_priceRanged %>%
ggplot(aes(x=priceRange,y=metro_dist)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(x=priceRange, y=metro_dist, colour=metro_dist.outlier, shape=metro_dist.outlier), position="jitter") +
scale_colour_manual(values = c("black", NA, NA)) +
scale_shape_manual(values=c(20,NA,20)) +
guides(colour="none") +
guides(shape="none")
# bar chart: number of outliers(metro_dist)
airbnb_priceRanged %>% group_by(priceRange) %>% summarise(
metro_dist.outlierPercentage = length(realSum[metro_dist.outlier=="high"])/length(realSum[TRUE])
) %>% ggplot(aes(x=priceRange, y=metro_dist.outlierPercentage)) + geom_col()
airbnb_priceRanged_high <- airbnb_priceRanged %>% filter(priceRange=="high") %>% # filter by price range
mutate(isHighOutlier = if_else(dist.outlier=="high"&metro_dist.outlier=="high", "outlier", "normal")) %>% # create a column to determine if the room is faraway from both metro city center
group_by(isHighOutlier) %>%
mutate(totalCount = n()) %>%
ungroup() %>%
group_by(isHighOutlier, location) %>%
mutate(numLocation = n()) %>% # counting
mutate(locationPercentage = numLocation/totalCount) %>% # convert to perentage
summarise( # aggregate the data
percentage=mean(locationPercentage)
)
# pie chart
# reference: https://r-graph-gallery.com/piechart-ggplot2.html
airbnb_priceRanged_high %>%
ggplot(aes(y=percentage,x="",fill=location)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
facet_wrap(isHighOutlier~.)
# BAR CHART
airbnb_priceRanged_high %>%
ggplot(aes(y=location,x=percentage,fill=isHighOutlier)) +
geom_col(position = position_dodge(preserve = "single"))
